{
  "version": 3,
  "sources": ["../../ol/color.js"],
  "sourcesContent": ["/**\n * @module ol/color\n */\nimport {createCanvasContext2D} from './dom.js';\nimport {clamp, toFixed} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * Color to indicate that no color should be rendered. This is meant to be used for per-reference\n * comparisons only.\n * @type {Color}\n */\nexport const NO_COLOR = [NaN, NaN, NaN, 0];\n\nlet colorParseContext;\n/**\n * @return {CanvasRenderingContext2D} The color parse context\n */\nfunction getColorParseContext() {\n  if (!colorParseContext) {\n    colorParseContext = createCanvasContext2D(1, 1, undefined, {\n      willReadFrequently: true,\n      desynchronized: true,\n    });\n  }\n  return colorParseContext;\n}\n\nconst rgbModernRegEx =\n  /^rgba?\\(\\s*(\\d+%?)\\s+(\\d+%?)\\s+(\\d+%?)(?:\\s*\\/\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst rgbLegacyAbsoluteRegEx =\n  /^rgba?\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst rgbLegacyPercentageRegEx =\n  /^rgba?\\(\\s*(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)(?:\\s*,\\s*(\\d+%|\\d*\\.\\d+|[01]))?\\s*\\)$/i;\nconst hexRegEx = /^#([\\da-f]{3,4}|[\\da-f]{6}|[\\da-f]{8})$/i;\n\n/**\n * @param {string} s Color component as number or percentage.\n * @param {number} divider Divider for percentage.\n * @return {number} Color component.\n */\nfunction toColorComponent(s, divider) {\n  return s.endsWith('%')\n    ? Number(s.substring(0, s.length - 1)) / divider\n    : Number(s);\n}\n\n/**\n * @param {string} color Color string.\n */\nfunction throwInvalidColor(color) {\n  throw new Error('failed to parse \"' + color + '\" as color');\n}\n\n/**\n * @param {string} color Color string.\n * @return {Color} RGBa color array.\n */\nfunction parseRgba(color) {\n  // Fast lane for rgb(a) colors\n  if (color.toLowerCase().startsWith('rgb')) {\n    const rgb =\n      color.match(rgbLegacyAbsoluteRegEx) ||\n      color.match(rgbModernRegEx) ||\n      color.match(rgbLegacyPercentageRegEx);\n    if (rgb) {\n      const alpha = rgb[4];\n      const rgbDivider = 100 / 255;\n      return [\n        clamp((toColorComponent(rgb[1], rgbDivider) + 0.5) | 0, 0, 255),\n        clamp((toColorComponent(rgb[2], rgbDivider) + 0.5) | 0, 0, 255),\n        clamp((toColorComponent(rgb[3], rgbDivider) + 0.5) | 0, 0, 255),\n        alpha !== undefined ? clamp(toColorComponent(alpha, 100), 0, 1) : 1,\n      ];\n    }\n    throwInvalidColor(color);\n  }\n  // Fast lane for hex colors (also with alpha)\n  if (color.startsWith('#')) {\n    if (hexRegEx.test(color)) {\n      const hex = color.substring(1);\n      const step = hex.length <= 4 ? 1 : 2;\n      const colorFromHex = [0, 0, 0, 255];\n      for (let i = 0, ii = hex.length; i < ii; i += step) {\n        let colorComponent = parseInt(hex.substring(i, i + step), 16);\n        if (step === 1) {\n          colorComponent += colorComponent << 4;\n        }\n        colorFromHex[i / step] = colorComponent;\n      }\n      colorFromHex[3] = colorFromHex[3] / 255;\n      return colorFromHex;\n    }\n    throwInvalidColor(color);\n  }\n  // Use canvas color serialization to parse the color into hex or rgba\n  // See https://www.w3.org/TR/2021/SPSD-2dcontext-20210128/#serialization-of-a-color\n  const context = getColorParseContext();\n  context.fillStyle = '#abcdef';\n  let invalidCheckFillStyle = context.fillStyle;\n  context.fillStyle = color;\n  if (context.fillStyle === invalidCheckFillStyle) {\n    context.fillStyle = '#fedcba';\n    invalidCheckFillStyle = context.fillStyle;\n    context.fillStyle = color;\n    if (context.fillStyle === invalidCheckFillStyle) {\n      throwInvalidColor(color);\n    }\n  }\n  const colorString = context.fillStyle;\n  if (colorString.startsWith('#') || colorString.startsWith('rgba')) {\n    return parseRgba(colorString);\n  }\n  context.clearRect(0, 0, 1, 1);\n  context.fillRect(0, 0, 1, 1);\n  const colorFromImage = Array.from(context.getImageData(0, 0, 1, 1).data);\n  colorFromImage[3] = toFixed(colorFromImage[3] / 255, 3);\n  return colorFromImage;\n}\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\n * @type {number}\n */\nconst MAX_CACHE_SIZE = 1024;\n\n/**\n * We maintain a small cache of parsed strings.  Whenever the cache grows too large,\n * we delete an arbitrary set of the entries.\n *\n * @type {Object<string, Color>}\n */\nconst cache = {};\n\n/**\n * @type {number}\n */\nlet cacheSize = 0;\n\n/**\n * @param {Color} color A color that may or may not have an alpha channel.\n * @return {Color} The input color with an alpha channel.  If the input color has\n * an alpha channel, the input color will be returned unchanged.  Otherwise, a new\n * array will be returned with the input color and an alpha channel of 1.\n */\nexport function withAlpha(color) {\n  if (color.length === 4) {\n    return color;\n  }\n  const output = color.slice();\n  output[3] = 1;\n  return output;\n}\n\n// The functions b1, b2, a1, a2, rgbaToLcha and lchaToRgba below are adapted from\n// https://stackoverflow.com/a/67219995/2389327\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction b1(v) {\n  return v > 0.0031308 ? Math.pow(v, 1 / 2.4) * 269.025 - 14.025 : v * 3294.6;\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction b2(v) {\n  return v > 0.2068965 ? Math.pow(v, 3) : (v - 4 / 29) * (108 / 841);\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction a1(v) {\n  return v > 10.314724 ? Math.pow((v + 14.025) / 269.025, 2.4) : v / 3294.6;\n}\n\n/**\n * @param {number} v Input value.\n * @return {number} Output value.\n */\nfunction a2(v) {\n  return v > 0.0088564 ? Math.pow(v, 1 / 3) : v / (108 / 841) + 4 / 29;\n}\n\n/**\n * @param {Color} color RGBA color.\n * @return {Color} LCHuv color with alpha.\n */\nexport function rgbaToLcha(color) {\n  const r = a1(color[0]);\n  const g = a1(color[1]);\n  const b = a1(color[2]);\n  const y = a2(r * 0.222488403 + g * 0.716873169 + b * 0.06060791);\n  const l = 500 * (a2(r * 0.452247074 + g * 0.399439023 + b * 0.148375274) - y);\n  const q = 200 * (y - a2(r * 0.016863605 + g * 0.117638439 + b * 0.865350722));\n  const h = Math.atan2(q, l) * (180 / Math.PI);\n  return [\n    116 * y - 16,\n    Math.sqrt(l * l + q * q),\n    h < 0 ? h + 360 : h,\n    color[3],\n  ];\n}\n\n/**\n * @param {Color} color LCHuv color with alpha.\n * @return {Color} RGBA color.\n */\nexport function lchaToRgba(color) {\n  const l = (color[0] + 16) / 116;\n  const c = color[1];\n  const h = (color[2] * Math.PI) / 180;\n  const y = b2(l);\n  const x = b2(l + (c / 500) * Math.cos(h));\n  const z = b2(l - (c / 200) * Math.sin(h));\n  const r = b1(x * 3.021973625 - y * 1.617392459 - z * 0.404875592);\n  const g = b1(x * -0.943766287 + y * 1.916279586 + z * 0.027607165);\n  const b = b1(x * 0.069407491 - y * 0.22898585 + z * 1.159737864);\n  return [\n    clamp((r + 0.5) | 0, 0, 255),\n    clamp((g + 0.5) | 0, 0, 255),\n    clamp((b + 0.5) | 0, 0, 255),\n    color[3],\n  ];\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport function fromString(s) {\n  if (s === 'none') {\n    return NO_COLOR;\n  }\n  if (cache.hasOwnProperty(s)) {\n    return cache[s];\n  }\n  if (cacheSize >= MAX_CACHE_SIZE) {\n    let i = 0;\n    for (const key in cache) {\n      if ((i++ & 3) === 0) {\n        delete cache[key];\n        --cacheSize;\n      }\n    }\n  }\n\n  const color = parseRgba(s);\n  if (color.length !== 4) {\n    throwInvalidColor(s);\n  }\n  for (const c of color) {\n    if (isNaN(c)) {\n      throwInvalidColor(s);\n    }\n  }\n  cache[s] = color;\n  ++cacheSize;\n  return color;\n}\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 1000) / 1000;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  try {\n    fromString(s);\n    return true;\n  } catch {\n    return false;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
