/**
 * OpenLayers 地图应用教学Demo
 * 
 * 本文件演示了如何使用OpenLayers库创建一个完整的地图应用
 * 适合初学者学习OpenLayers的核心概念和基本用法
 * 
 * 学习目标：
 * 1. 理解OpenLayers的基本架构
 * 2. 掌握地图、视图、图层、数据源的概念
 * 3. 学会加载和显示地理数据
 * 4. 实现地图交互功能（缩放、居中、定位）
 * 5. 理解坐标系统和投影
 * 
 * 前置知识：
 * - 基本的HTML、CSS、JavaScript知识
 * - 了解地理坐标系统（经纬度）
 * - 了解GeoJSON数据格式
 */

// ============================================================================
// 第一步：导入OpenLayers核心模块
// ============================================================================
// 这些import语句从OpenLayers库中导入我们需要的类
// 每个类都有特定的功能，我们将在下面详细解释

import Map from 'ol/Map.js';                    // 地图主类：整个地图应用的容器
import View from 'ol/View.js';                  // 视图类：控制地图的显示范围、中心点、缩放级别
import GeoJSON from 'ol/format/GeoJSON.js';     // GeoJSON格式解析器：用于读取和解析GeoJSON地理数据
import TileLayer from 'ol/layer/Tile.js';       // 瓦片图层类：用于显示在线地图瓦片（如OpenStreetMap）
import VectorLayer from 'ol/layer/Vector.js';   // 矢量图层类：用于显示矢量地理数据（如点、线、面）
import OSM from 'ol/source/OSM.js';             // OpenStreetMap数据源：提供免费的在线地图瓦片
import VectorSource from 'ol/source/Vector.js'; // 矢量数据源：用于加载和管理矢量地理数据
import {fromLonLat, transform} from 'ol/proj.js'; // 坐标转换工具：在不同坐标系统间转换坐标

// ============================================================================
// 第二步：定义应用数据
// ============================================================================
// 在这里我们定义应用中需要用到的城市坐标
// 这些坐标将用于地图定位和导航功能

/**
 * 城市坐标常量定义
 * 
 * 坐标系统说明：
 * - 我们使用的是WGS84地理坐标系统（EPSG:4326）
 * - 坐标格式：[经度, 纬度]
 * - 经度范围：-180到+180（负值表示西经，正值表示东经）
 * - 纬度范围：-90到+90（负值表示南纬，正值表示北纬）
 * 
 * 中国位于东经73°到135°，北纬18°到54°之间
 */
const CITY_COORDINATES = {
  linze: [100.497777, 39.480275],      // 临泽县：甘肃省张掖市临泽县
  xian: [108.948024, 34.263161]        // 西安市：陕西省西安市
};

/**
 * 坐标验证函数
 * 
 * 作用：确保传入的坐标数据是有效的
 * 为什么需要验证：防止无效坐标导致地图显示错误或崩溃
 * 
 * @param {Array} coords - 坐标数组，格式：[经度, 纬度]
 * @returns {boolean} - 返回true表示坐标有效，false表示无效
 */
function isValidCoordinates(coords) {
  // 检查是否为数组且长度为2
  if (!Array.isArray(coords) || coords.length !== 2) {
    return false;
  }
  
  // 检查两个元素是否都是数字
  if (typeof coords[0] !== 'number' || typeof coords[1] !== 'number') {
    return false;
  }
  
  // 检查经度范围（-180到+180）
  if (coords[0] < -180 || coords[0] > 180) {
    return false;
  }
  
  // 检查纬度范围（-90到+90）
  if (coords[1] < -90 || coords[1] > 90) {
    return false;
  }
  
  return true;
}

// ============================================================================
// 第三步：创建数据源
// ============================================================================
// 数据源是OpenLayers中负责管理数据的组件
// 它定义了数据的来源、格式和加载方式

/**
 * 创建矢量数据源
 * 
 * 数据源的作用：
 * - 管理地理数据的加载和存储
 * - 提供数据查询和过滤功能
 * - 处理数据的更新和同步
 * 
 * 配置说明：
 * - url: 指定GeoJSON文件的路径（相对于HTML文件）
 * - format: 指定数据格式解析器，告诉OpenLayers如何解析数据
 */
const source = new VectorSource({
  url: 'linze.geojson',                    // GeoJSON文件路径：包含临泽县的地理边界数据
  format: new GeoJSON(),                    // 使用GeoJSON格式解析器解析数据
});

// ============================================================================
// 第四步：创建图层
// ============================================================================
// 图层是OpenLayers中显示数据的组件
// 每个图层负责显示特定类型的数据，可以叠加显示

/**
 * 创建矢量图层
 * 
 * 图层的作用：
 * - 控制数据的显示方式
 * - 设置数据的样式（颜色、大小、透明度等）
 * - 管理数据的可见性和交互性
 * 
 * 样式说明：
 * - 使用OpenLayers的样式语法
 * - 可以设置填充色、边框、点样式等
 * - 支持CSS样式的颜色值和透明度
 */
const vectorLayer = new VectorLayer({
  source: source,                           // 关联数据源：告诉图层从哪里获取数据
  
  // 样式配置：定义如何渲染地理要素
  style: {
    'fill-color': 'rgba(255, 255, 255, 0.6)',      // 填充颜色：半透明白色（rgba最后一个参数0.6表示60%透明度）
    'stroke-width': 1,                              // 边框宽度：1像素
    'stroke-color': '#319FD3',                       // 边框颜色：蓝色（十六进制颜色值）
    'circle-radius': 5,                              // 点要素半径：5像素（用于显示点状地理要素）
    'circle-fill-color': 'rgba(255, 255, 255, 0.6)', // 点填充颜色：半透明白色
    'circle-stroke-width': 1,                        // 点边框宽度：1像素
    'circle-stroke-color': '#319FD3',                // 点边框颜色：蓝色
  },
});

// ============================================================================
// 第五步：创建地图视图
// ============================================================================
// 视图控制地图的显示范围、中心点、缩放级别等
// 它是用户与地图交互的"窗口"

/**
 * 创建地图视图
 * 
 * 视图的作用：
 * - 控制地图显示的中心点
 * - 设置地图的缩放级别
 * - 定义坐标系统（投影）
 * - 管理地图的旋转和倾斜
 * 
 * 投影系统说明：
 * - EPSG:4326：WGS84地理坐标系统，使用经纬度
 * - 这是最常用的地理坐标系统，GPS设备也使用这个系统
 * - 优点：直观易懂，全球通用
 * - 缺点：在高纬度地区会有变形
 */
const view = new View({
  center: [100, 40],                        // 初始中心点：中国中部（经度100°，纬度40°）
  zoom: 4,                                  // 初始缩放级别：4级（适合查看整个中国）
  projection: 'EPSG:4326'                   // 坐标系统：WGS84地理坐标系统
});

// ============================================================================
// 第六步：创建地图实例
// ============================================================================
// 地图是OpenLayers应用的核心组件
// 它整合了所有图层、视图和交互功能

/**
 * 创建地图实例
 * 
 * 地图的作用：
 * - 整合所有图层和视图
 * - 管理用户交互（鼠标、键盘、触摸）
 * - 提供地图控制工具（缩放、平移、旋转等）
 * - 处理地图事件（点击、拖拽等）
 * 
 * 图层顺序说明：
 * - 先添加的图层显示在底层
 * - 后添加的图层显示在上层
 * - 这里先添加瓦片图层（底图），再添加矢量图层（数据）
 */
const map = new Map({
  layers: [
    // 瓦片图层：提供地图底图
    new TileLayer({
      source: new OSM(),                    // 使用OpenStreetMap作为底图（免费的世界地图）
    }),
    // 矢量图层：显示我们的地理数据
    vectorLayer,                            // 显示临泽县的地理边界
  ],
  target: 'map',                            // 目标容器：指定地图显示在HTML中的哪个元素
  view: view,                               // 关联视图：告诉地图使用哪个视图配置
});

// ============================================================================
// 第七步：添加交互功能
// ============================================================================
// 这里我们添加按钮点击事件，实现地图的交互功能
// 这些功能展示了如何通过JavaScript控制地图的显示

/**
 * 第一个按钮：缩放到临泽区域
 * 
 * 功能说明：
 * - 自动调整地图视图以显示临泽县的完整地理边界
 * - 使用view.fit()方法，这是OpenLayers推荐的显示地理要素的方法
 * - 自动计算最佳的缩放级别和中心点
 * 
 * 学习要点：
 * - 如何获取数据源中的地理要素
 * - 如何使用view.fit()方法自动调整视图
 * - padding参数的作用（为边界添加内边距）
 */
const zoomtoswitzerland = document.getElementById('zoomtoswitzerland');
zoomtoswitzerland.addEventListener(
  'click',                                  // 监听点击事件
  function () {
    // 获取数据源中的第一个要素（临泽县的多边形边界）
    const feature = source.getFeatures()[0];
    
    // 从要素中提取几何对象（多边形）
    const polygon = feature.getGeometry();
    
    // 使用fit方法自动调整视图以显示多边形
    // padding参数为边界添加内边距，确保要素完全可见
    // 格式：[上, 右, 下, 左] 像素值
    view.fit(polygon, {padding: [170, 50, 30, 150]});
  },
  false,                                    // 事件冒泡设置（这里使用默认值）
);

/**
 * 第二个按钮：缩放到临泽县中心点
 * 
 * 功能说明：
 * - 将地图中心移动到临泽县的坐标位置
 * - 设置合适的缩放级别（10级，适合查看县级区域）
 * - 使用动画效果，提供流畅的用户体验
 * 
 * 学习要点：
 * - 如何使用预定义的坐标进行地图定位
 * - 如何设置合适的缩放级别
 * - 如何使用view.animate()方法创建动画效果
 * - 坐标验证的重要性
 */
const zoomtolausanne = document.getElementById('zoomtolausanne');
zoomtolausanne.addEventListener(
  'click',
  function () {
    // 获取临泽县的坐标
    const linzeCoords = CITY_COORDINATES.linze;
    
    // 验证坐标的有效性（防止程序错误）
    if (!isValidCoordinates(linzeCoords)) {
      console.error("临泽县坐标无效:", linzeCoords);
      return; // 如果坐标无效，直接返回，不执行后续操作
    }
    
    // 输出调试信息（帮助开发者了解程序执行状态）
    console.log("缩放到临泽县坐标:", linzeCoords);
    
    // 使用动画效果移动到临泽县
    // animate方法可以同时改变多个视图属性
    view.animate({
      center: linzeCoords,                  // 设置新的中心点
      zoom: 10,                             // 设置缩放级别（10级适合查看县级区域）
      duration: 1000                        // 动画持续时间：1000毫秒（1秒）
    });
  },
  false,
);

/**
 * 第三个按钮：居中到西安市
 * 
 * 功能说明：
 * - 将地图中心移动到西安市位置
 * - 保持当前的缩放级别不变
 * - 只改变位置，不改变缩放
 * 
 * 学习要点：
 * - 如何保持某些视图属性不变
 * - 如何获取当前的视图状态
 * - 不同按钮功能的区别和设计思路
 */
const centerlausanne = document.getElementById('centerlausanne');
centerlausanne.addEventListener(
  'click',
  function () {
    // 获取西安市的坐标
    const xianCoords = CITY_COORDINATES.xian;
    
    // 验证坐标的有效性
    if (!isValidCoordinates(xianCoords)) {
      console.error("西安市坐标无效:", xianCoords);
      return;
    }
    
    // 获取当前的缩放级别（用于保持缩放不变）
    const currentZoom = view.getZoom();
    
    // 输出调试信息
    console.log("居中到西安市坐标:", xianCoords, "当前缩放级别:", currentZoom);
    
    // 使用动画效果移动到西安市
    // 注意：这里没有设置zoom属性，所以会保持当前缩放级别
    view.animate({
      center: xianCoords,                   // 设置新的中心点
      duration: 800                         // 动画持续时间：800毫秒（0.8秒）
    });
  },
  false,
);

// ============================================================================
// 总结和学习要点
// ============================================================================
/*
 * 本Demo展示了OpenLayers地图开发的基本流程：
 * 
 * 1. 导入必要的模块
 * 2. 定义应用数据（坐标、配置等）
 * 3. 创建数据源（管理地理数据）
 * 4. 创建图层（显示数据）
 * 5. 创建视图（控制显示范围）
 * 6. 创建地图（整合所有组件）
 * 7. 添加交互功能（按钮事件）
 * 
 * 核心概念：
 * - 数据源（Source）：管理数据
 * - 图层（Layer）：显示数据
 * - 视图（View）：控制显示
 * - 地图（Map）：整合组件
 * 
 * 常用方法：
 * - view.fit()：自动调整视图以显示地理要素
 * - view.animate()：创建平滑的视图变化动画
 * - view.centerOn()：精确定位到指定坐标
 * 
 * 最佳实践：
 * - 始终验证输入数据的有效性
 * - 使用适当的缩放级别
 * - 添加动画效果提升用户体验
 * - 提供清晰的用户反馈
 * 
 * 进阶学习方向：
 * - 添加更多交互功能（点击、拖拽、缩放等）
 * - 实现数据查询和过滤
 * - 添加地图控件（比例尺、图例、图层控制等）
 * - 集成其他数据源（WMS、WFS等）
 * - 实现空间分析功能
 */
